/*
 * Plaid API Endpoints Copy 2
 *
 * A collection of Plaid API endpoints for the `sandbox` environment. Each endpoint request comes with an example request & response. It also contains 'use cases' for each product.   <br /> Before you begin, please set your `client_id` and `secret_key` variables in the Sandbox environment. You can find them in your Plaid [dashboard](https://dashboard.plaid.com/account/keys). Set the variables by clicking on the 'eye' icon in the top-right corner of the screen.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PaymentInitiationUKOnlyApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PaymentInitiationUKOnlyApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PaymentInitiationUKOnlyApiClient<C> {
        PaymentInitiationUKOnlyApiClient {
            configuration,
        }
    }
}

pub trait PaymentInitiationUKOnlyApi {
    fn create_payment(&self, create_payment_request: crate::models::CreatePaymentRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn create_payment_recipient(&self, create_payment_recipient_request: crate::models::CreatePaymentRecipientRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn create_payment_token(&self, create_payment_token_request: crate::models::CreatePaymentTokenRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_payment(&self, get_payment_request: crate::models::GetPaymentRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_payment_recipient(&self, get_payment_recipient_request: crate::models::GetPaymentRecipientRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn list_payment_recipients(&self, list_payment_recipients_request: crate::models::ListPaymentRecipientsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn list_payments(&self, list_payments_request: crate::models::ListPaymentsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PaymentInitiationUKOnlyApi for PaymentInitiationUKOnlyApiClient<C> {
    fn create_payment(&self, create_payment_request: crate::models::CreatePaymentRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/payment/create".to_string())
        ;
        req = req.with_body_param(create_payment_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn create_payment_recipient(&self, create_payment_recipient_request: crate::models::CreatePaymentRecipientRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/recipient/create".to_string())
        ;
        req = req.with_body_param(create_payment_recipient_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn create_payment_token(&self, create_payment_token_request: crate::models::CreatePaymentTokenRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/payment/token/create".to_string())
        ;
        req = req.with_body_param(create_payment_token_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_payment(&self, get_payment_request: crate::models::GetPaymentRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/payment/get".to_string())
        ;
        req = req.with_body_param(get_payment_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_payment_recipient(&self, get_payment_recipient_request: crate::models::GetPaymentRecipientRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/recipient/get".to_string())
        ;
        req = req.with_body_param(get_payment_recipient_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn list_payment_recipients(&self, list_payment_recipients_request: crate::models::ListPaymentRecipientsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/recipient/list".to_string())
        ;
        req = req.with_body_param(list_payment_recipients_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn list_payments(&self, list_payments_request: crate::models::ListPaymentsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/payment_initiation/payment/list".to_string())
        ;
        req = req.with_body_param(list_payments_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
