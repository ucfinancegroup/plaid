/*
 * Plaid API Endpoints Copy 2
 *
 * A collection of Plaid API endpoints for the `sandbox` environment. Each endpoint request comes with an example request & response. It also contains 'use cases' for each product.   <br /> Before you begin, please set your `client_id` and `secret_key` variables in the Sandbox environment. You can find them in your Plaid [dashboard](https://dashboard.plaid.com/account/keys). Set the variables by clicking on the 'eye' icon in the top-right corner of the screen.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `retrieve_insitution_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveInsitutionListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `search_institutionby_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchInstitutionbyIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `search_institutionby_name`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchInstitutionbyNameError {
    UnknownValue(serde_json::Value),
}


/// To see a full list of supported institutions across all products, use the `/institutions/get` and `/institutions/search` endpoints.   <br /> Use the `count` and `offset` query parameters to retrieve the desired institution data.    <br /> `count`: The total number of Institutions to return, with 0 < count <= 500. <br /> `offset`: The number of Institutions to skip before returning results, with offset >= 0
pub async fn retrieve_insitution_list(configuration: &configuration::Configuration, retrieve_insitution_list_request: crate::models::RetrieveInsitutionListRequest) -> Result<crate::models::RetrieveInsitutionListExample, Error<RetrieveInsitutionListError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/institutions/get", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&retrieve_insitution_list_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RetrieveInsitutionListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn search_institutionby_id(configuration: &configuration::Configuration, search_institutionby_id_request: crate::models::SearchInstitutionbyIdRequest) -> Result<crate::models::SearchInstitutionbyIdExample, Error<SearchInstitutionbyIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/institutions/get_by_id", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&search_institutionby_id_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SearchInstitutionbyIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The `/institutions/search` endpoint makes it easy to stay up-to-date with supported institutions and help your users quickly find their institutions.
pub async fn search_institutionby_name(configuration: &configuration::Configuration, search_institutionby_name_request: crate::models::SearchInstitutionbyNameRequest) -> Result<crate::models::SearchInstitutionbyNameExample, Error<SearchInstitutionbyNameError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/institutions/search", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&search_institutionby_name_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SearchInstitutionbyNameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

