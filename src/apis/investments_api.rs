/*
 * Plaid API Endpoints Copy 2
 *
 * A collection of Plaid API endpoints for the `sandbox` environment. Each endpoint request comes with an example request & response. It also contains 'use cases' for each product.   <br /> Before you begin, please set your `client_id` and `secret_key` variables in the Sandbox environment. You can find them in your Plaid [dashboard](https://dashboard.plaid.com/account/keys). Set the variables by clicking on the 'eye' icon in the top-right corner of the screen.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct InvestmentsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> InvestmentsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> InvestmentsApiClient<C> {
        InvestmentsApiClient {
            configuration,
        }
    }
}

pub trait InvestmentsApi {
    fn retrieve_investments_holdings(&self, retrieve_investments_holdings_request: crate::models::RetrieveInvestmentsHoldingsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn retrieve_investments_transactions(&self, retrieve_investments_transactions_request: crate::models::RetrieveInvestmentsTransactionsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>InvestmentsApi for InvestmentsApiClient<C> {
    fn retrieve_investments_holdings(&self, retrieve_investments_holdings_request: crate::models::RetrieveInvestmentsHoldingsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/investments/holdings/get".to_string())
        ;
        req = req.with_body_param(retrieve_investments_holdings_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn retrieve_investments_transactions(&self, retrieve_investments_transactions_request: crate::models::RetrieveInvestmentsTransactionsRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/investments/transactions/get".to_string())
        ;
        req = req.with_body_param(retrieve_investments_transactions_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
