/*
 * Plaid API Endpoints Copy 2
 *
 * A collection of Plaid API endpoints for the `sandbox` environment. Each endpoint request comes with an example request & response. It also contains 'use cases' for each product.   <br /> Before you begin, please set your `client_id` and `secret_key` variables in the Sandbox environment. You can find them in your Plaid [dashboard](https://dashboard.plaid.com/account/keys). Set the variables by clicking on the 'eye' icon in the top-right corner of the screen.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ItemManagementApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ItemManagementApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ItemManagementApiClient<C> {
        ItemManagementApiClient {
            configuration,
        }
    }
}

pub trait ItemManagementApi {
    fn automated_deposit_webhook(&self, automated_deposit_webhook_request: crate::models::AutomatedDepositWebhookRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn create_public_tokenfor_update(&self, create_public_tokenfor_update_request: crate::models::CreatePublicTokenforUpdateRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn remove_item(&self, remove_item_request: crate::models::RemoveItemRequest) -> Box<dyn Future<Item = crate::models::RemoveItemExample, Error = Error<serde_json::Value>>>;
    fn retrieve_an_items_accounts(&self, retrieve_an_items_accounts_request: crate::models::RetrieveAnItemsAccountsRequest) -> Box<dyn Future<Item = crate::models::RetrieveAnItemsAccountsExample, Error = Error<serde_json::Value>>>;
    fn retrieve_item(&self, retrieve_item_request: crate::models::RetrieveItemRequest) -> Box<dyn Future<Item = crate::models::RetrieveItemExample, Error = Error<serde_json::Value>>>;
    fn rotate_access_token(&self, rotate_access_token_request: crate::models::RotateAccessTokenRequest) -> Box<dyn Future<Item = crate::models::RotateAccessTokenExample, Error = Error<serde_json::Value>>>;
    fn simulate_itemloginrequired_sandbox_only(&self, simulate_item_login_required_sandbox_only_request: crate::models::SimulateItemLoginRequiredSandboxOnlyRequest) -> Box<dyn Future<Item = crate::models::SimulateItemLoginRequiredSandboxOnlyExample, Error = Error<serde_json::Value>>>;
    fn update_an_items_webhook(&self, update_an_items_webhook_request: crate::models::UpdateAnItemsWebhookRequest) -> Box<dyn Future<Item = crate::models::UpdateAnItemsWebhookExample, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>ItemManagementApi for ItemManagementApiClient<C> {
    fn automated_deposit_webhook(&self, automated_deposit_webhook_request: crate::models::AutomatedDepositWebhookRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/sandbox/item/set_verification_status".to_string())
        ;
        req = req.with_body_param(automated_deposit_webhook_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn create_public_tokenfor_update(&self, create_public_tokenfor_update_request: crate::models::CreatePublicTokenforUpdateRequest) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/item/public_token/create".to_string())
        ;
        req = req.with_body_param(create_public_tokenfor_update_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn remove_item(&self, remove_item_request: crate::models::RemoveItemRequest) -> Box<dyn Future<Item = crate::models::RemoveItemExample, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/item/remove".to_string())
        ;
        req = req.with_body_param(remove_item_request);

        req.execute(self.configuration.borrow())
    }

    fn retrieve_an_items_accounts(&self, retrieve_an_items_accounts_request: crate::models::RetrieveAnItemsAccountsRequest) -> Box<dyn Future<Item = crate::models::RetrieveAnItemsAccountsExample, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/accounts/get".to_string())
        ;
        req = req.with_body_param(retrieve_an_items_accounts_request);

        req.execute(self.configuration.borrow())
    }

    fn retrieve_item(&self, retrieve_item_request: crate::models::RetrieveItemRequest) -> Box<dyn Future<Item = crate::models::RetrieveItemExample, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/item/get".to_string())
        ;
        req = req.with_body_param(retrieve_item_request);

        req.execute(self.configuration.borrow())
    }

    fn rotate_access_token(&self, rotate_access_token_request: crate::models::RotateAccessTokenRequest) -> Box<dyn Future<Item = crate::models::RotateAccessTokenExample, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/item/access_token/invalidate".to_string())
        ;
        req = req.with_body_param(rotate_access_token_request);

        req.execute(self.configuration.borrow())
    }

    fn simulate_itemloginrequired_sandbox_only(&self, simulate_item_login_required_sandbox_only_request: crate::models::SimulateItemLoginRequiredSandboxOnlyRequest) -> Box<dyn Future<Item = crate::models::SimulateItemLoginRequiredSandboxOnlyExample, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/sandbox/item/reset_login".to_string())
        ;
        req = req.with_body_param(simulate_item_login_required_sandbox_only_request);

        req.execute(self.configuration.borrow())
    }

    fn update_an_items_webhook(&self, update_an_items_webhook_request: crate::models::UpdateAnItemsWebhookRequest) -> Box<dyn Future<Item = crate::models::UpdateAnItemsWebhookExample, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/item/webhook/update".to_string())
        ;
        req = req.with_body_param(update_an_items_webhook_request);

        req.execute(self.configuration.borrow())
    }

}
